import{_ as e,o as l,c as o,V as t}from"./chunks/framework.5ff5cf85.js";const u=JSON.parse('{"title":"HTML","description":"","frontmatter":{},"headers":[],"relativePath":"column/Interview/base_html/index.md","filePath":"column/Interview/base_html/index.md"}'),a={name:"column/Interview/base_html/index.md"},c=t(`<h1 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h1><p>作者： 晓“@”(ง •̀_•́)ง</p><h2 id="html-语义化⭐" tabindex="-1">HTML 语义化⭐ <a class="header-anchor" href="#html-语义化⭐" aria-label="Permalink to &quot;HTML 语义化⭐&quot;">​</a></h2><blockquote><p>提高代码的可读性，页面内容结构化，有利于开发和维护，同时提高的用户体验，有利于SEO</p><p>使用语义化标签能够提升网页的可读性和可访问性，并帮助搜索引擎正确解析和索引页面内容。</p><p>同时，合理、语义化的标签使用也有助于页面的样式编写和维护，提高开发效率</p></blockquote><h2 id="语义化标签" tabindex="-1">语义化标签 <a class="header-anchor" href="#语义化标签" aria-label="Permalink to &quot;语义化标签&quot;">​</a></h2><ol><li><code>&lt;header&gt;</code>：表示文档或节的页眉，通常包含网站的标题、导航等信息。</li><li><code>&lt;nav&gt;</code>：表示导航区域，用于包含网站的主要导航链接。</li><li><code>&lt;main&gt;</code>：表示网页的主要内容，一个页面中只能使用一次。</li><li><code>&lt;section&gt;</code>：表示文档中的一个独立区块或部分。</li><li><code>&lt;article&gt;</code>：表示独立的文章或博客帖子。</li><li><code>&lt;aside&gt;</code>：表示与页面主要内容相关但可以独立存在的部分，如侧边栏、广告等。</li><li><code>&lt;footer&gt;</code>：表示文档或节的页脚，通常包含版权信息、联系方式等。</li></ol><h2 id="标签类型⭐⭐" tabindex="-1">标签类型⭐⭐ <a class="header-anchor" href="#标签类型⭐⭐" aria-label="Permalink to &quot;标签类型⭐⭐&quot;">​</a></h2><ol><li>块级元素（Block-level Elements）: <ul><li>块级元素独占一行，会自动换行。</li><li>块级元素可以设置宽度、高度、内外边距等样式属性。</li><li>常见的块级元素有 <code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;h1&gt;</code>~<code>&lt;h6&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;li&gt;</code>、<code>&lt;table&gt;</code> 等。</li></ul></li><li>行内元素（Inline Elements）: <ul><li>行内元素不会独占一行，水平方向排列，不会自动换行。</li><li>行内元素的宽度、高度、内外边距等样式属性不起作用，只能通过 CSS 的部分属性控制。</li><li>常见的行内元素有 <code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;code&gt;</code> 等。</li></ul></li><li>空元素（Empty Elements）: <ul><li>空元素没有内容，没有结束标签。</li><li>空元素通常用来插入或嵌入其他内容，如图片、换行符等。</li><li>常见的空元素有 <code>&lt;br&gt;</code>（换行）、<code>&lt;hr&gt;</code>（水平分隔线）、<code>&lt;img&gt;</code>（图像）、<code>&lt;input&gt;</code>（输入框）等。</li></ul></li></ol><p>HTML5 中有一些元素可以根据上下文决定是块级元素还是行内元素，称为 &quot;块级行内元素&quot;。例如 <code>&lt;div&gt;</code> 元素默认是块级元素，但在某些情况下，也可以通过设置 <code>display: inline</code> 来将其转为行内元素</p><h2 id="标签对比" tabindex="-1">标签对比 <a class="header-anchor" href="#标签对比" aria-label="Permalink to &quot;标签对比&quot;">​</a></h2><p><code>&lt;strong&gt;</code> 和 <code>&lt;b&gt;</code> 标签的区别：</p><ul><li><code>&lt;strong&gt;</code> 标签用于<strong>强调重要内容</strong>，它是语义化标签，表示文本的重要性，通常会呈现为粗体。</li><li><code>&lt;b&gt;</code> 标签仅仅是用于呈现粗体文本的样式标签，它没有语义化的含义。</li></ul><p>由于 <code>&lt;strong&gt;</code> 是语义化标签，它的主要作用是<strong>强调重要内容</strong>，同时也有助于改善可访问性。搜索引擎和屏幕阅读器等工具能够识别并理解 <code>&lt;strong&gt;</code> 标签的语义，从而更好地理解页面结构和内容的重要性。</p><p>相似地，<code>&lt;i&gt;</code> 和 <code>&lt;em&gt;</code> 标签的区别也与上述类似：</p><ul><li><code>&lt;em&gt;</code> 标签用于<strong>强调文本</strong>的重要性，表示语气上的强调，并且通常以斜体显示。</li><li><code>&lt;i&gt;</code> 标签仅仅是用于呈现斜体文本的样式标签，没有语义化的含义。</li></ul><h2 id="img-标签" tabindex="-1">&lt;img&gt;标签 <a class="header-anchor" href="#img-标签" aria-label="Permalink to &quot;\\&lt;img&gt;标签&quot;">​</a></h2><p>2023/6/23 09:46:09</p><p><code>&lt;img&gt;</code> 标签是用于在网页上插入图像的标签。它支持多种图片格式，包括：</p><ul><li>JPEG（.jpg，.jpeg）：广泛用于存储照片和复杂图像，可以实现高质量的压缩。</li><li>PNG（.png）：支持透明背景和高品质的图像，通常用于图标、标志等。</li><li>GIF（.gif）：支持动画和透明背景，但颜色表现相对较弱，常用于简单的动态图像。</li><li>WebP（.webp）：谷歌开发的一种新的图像格式，可以提供更高的压缩率和更好的图像质量。</li></ul><p>这些图片格式在压缩方式、色彩表现、支持动画等方面有所不同，选择合适的图片格式取决于具体应用场景和需求。</p><p>关于 <code>&lt;img&gt;</code> 中的 <code>alt</code> 和 <code>title</code> 属性的区别如下：</p><ul><li><code>alt</code> 属性（代替文本）是必需的，用于提供图像的替代文本描述。如果图像无法加载或无法显示，浏览器会显示 <code>alt</code> 属性中的文本，这对于视觉障碍用户和搜索引擎来说非常重要。它应该简明扼要地描述图像的内容。</li><li><code>title</code> 属性（提示文本）是可选的，用于提供图像的额外信息。当鼠标悬停在图像上时，浏览器会显示 <code>title</code> 属性中的文本，通常用于提供更详细的描述或附加说明。</li></ul><p><code>alt</code> 属性是<strong>提供图像的替代文本描述</strong>，<strong>强调图像的内容</strong>；</p><p><code>title</code> 属性是<strong>提供图像的额外信息</strong>，用于提示用户或提供更详细的说明</p><h2 id="iframe-标签" tabindex="-1">&lt;iframe&gt;标签 <a class="header-anchor" href="#iframe-标签" aria-label="Permalink to &quot;\\&lt;iframe&gt;标签&quot;">​</a></h2><p>尽量少使用 <code>&lt;iframe&gt;</code> 标签是因为它具有一些潜在的问题和限制，包括：</p><ol><li><strong>安全性问题</strong>：由于 <code>&lt;iframe&gt;</code> 允许嵌入其他网页，恶意用户可能会利用它来进行跨站点脚本攻击（XSS）或点击劫持等安全攻击。</li><li><strong>难以维护和扩展</strong>：使用 <code>&lt;iframe&gt;</code> 可能导致页面结构复杂化。如果多个页面使用相同的 <code>&lt;iframe&gt;</code> 嵌入内容，那么需要对每个页面进行单独的更改和维护。这会增加开发和维护的困难。</li><li><strong>不利于搜索引擎优化（SEO）</strong>：搜索引擎通常无法读取和索引 <code>&lt;iframe&gt;</code> 中的内容，这可能会对页面的搜索排名产生负面影响。</li><li><strong>与移动设备兼容性有限</strong>：一些移动设备或浏览器可能不支持或不良好地处理 <code>&lt;iframe&gt;</code>，这可能导致显示问题或用户体验下降。</li></ol><p>尽管 <code>&lt;iframe&gt;</code> 有上述限制，但在某些情况下仍然有其用途。常见的 <code>&lt;iframe&gt;</code> 用法包括：</p><ul><li><strong>嵌入其他网页或内容</strong>：通过 <code>&lt;iframe&gt;</code> 可以将其他网页、地图、视频等嵌入到当前页面中。</li><li><strong>实现可扩展的组件</strong>：某些 JavaScript 库（如交互性图表库）可能通过 <code>&lt;iframe&gt;</code> 在页面中嵌入可交互的组件。</li></ul><p>注：注意安全性和用户体验，并确保根据具体需求权衡利弊。在大多数情况下，可以尝试使用其他解决方案来避免使用 <code>&lt;iframe&gt;</code>，如使用服务器端技术或前端框架来动态加载内容。</p><h2 id="label-标签" tabindex="-1">&lt;label&gt;标签 <a class="header-anchor" href="#label-标签" aria-label="Permalink to &quot;\\&lt;label&gt;标签&quot;">​</a></h2><p><code>&lt;label&gt;</code> 标签的作用是为表单元素提供文本标签，用于描述表单元素的用途或作用。它可以通过关联 <code>&lt;label&gt;</code> 和相应的表单元素（如文本框、复选框等）来改善表单的可用性和可访问性。</p><p>使用 <code>&lt;label&gt;</code> 标签的好处包括：</p><ol><li><strong>提高可访问性</strong>：屏幕阅读器可以读取与表单元素关联的标签，从而帮助视觉障碍用户更好地理解表单的目的和功能。</li><li><strong>扩大点击目标区域</strong>：通过将表单元素放在 <code>&lt;label&gt;</code> 标签内，用户可以单击标签文本时触发相关的表单元素。这样可以扩大可点击的区域，提供更好的用户体验。</li><li><strong>提升用户体验</strong>：标签文本可以提供更明确的指示，帮助用户正确填写表单，并防止用户猜测表单元素的用途。</li></ol><p>使用 <code>&lt;label&gt;</code> 标签的方法如下：</p><ol><li><p>直接关联：将 <code>&lt;label&gt;</code> 标签的 <code>for</code> 属性设置为表单元素的 <code>id</code> 属性，建立关联。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">username</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">用户名：</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">username</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li><li><p>包裹关联：将表单元素置于 <code>&lt;label&gt;</code> 标签内，不需要额外设置 <code>for</code> 属性。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">用户名：</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">label</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div></li></ol><p>建议在编写表单时始终使用 <code>&lt;label&gt;</code> 标签来提高表单的可用性和可访问性。同时，可以通过样式化 <code>&lt;label&gt;</code> 来美化表单并提升用户体验。</p><h2 id="meta-标签" tabindex="-1">&lt;meta&gt;标签 <a class="header-anchor" href="#meta-标签" aria-label="Permalink to &quot;\\&lt;meta&gt;标签&quot;">​</a></h2><p>&lt;meta&gt; 标签中的 viewport 属性用于控制网页在移动设备上的布局和缩放行为。</p><p><code>viewport</code> 的作用是告诉浏览器如何设置网页的视口（viewport），即可见区域的大小和缩放级别，以适应不同设备的屏幕尺寸和分辨率。通过设置正确的 <code>viewport</code> 属性，可以实现响应式设计，使网页在不同设备上呈现出更好的用户体验。</p><p><code>viewport</code> 属性的常见属性值包括：</p><ol><li><code>width=device-width</code>：将视口的宽度设置为设备的宽度，使网页在移动设备上以设备宽度为基准进行布局。</li><li><code>initial-scale=1.0</code>：设置初始缩放级别为 1.0，即不进行缩放，使网页以原始比例显示。</li><li><code>maximum-scale=1.0</code>：限制最大缩放级别为 1.0，防止用户进行进一步的放大缩小操作。</li><li><code>minimum-scale=1.0</code>：限制最小缩放级别为 1.0，防止用户进行进一步的放大缩小操作。</li><li><code>user-scalable=no</code>：禁用用户缩放功能，防止用户通过手势进行缩放。</li></ol><p>示例代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">viewport</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>请注意，<code>viewport</code> 的属性值可以根据具体需求进行灵活配置。通过使用不同的属性值，可以实现不同的布局和缩放行为，以适应不同的设备和用户需求。</p><h2 id="html5⭐⭐⭐" tabindex="-1">html5⭐⭐⭐ <a class="header-anchor" href="#html5⭐⭐⭐" aria-label="Permalink to &quot;html5⭐⭐⭐&quot;">​</a></h2><p>HTML5 的新标签包括：</p><p>Canvas绘图以及SVG绘图。 拖放（Drag and drop）API 语义化标签（header、nav、footer、article、section） 音频、视频（audio、video）API 地理定位（Geolocation） 本地离线存储（localStorage）,长期存储数据，关闭浏览器后不丢失。 会话储存（sessionStorage）,数据在关闭浏览器后自动删除。 表单控件（calendar、date、time、email、url、search） 多任务 webworker 全双工通信协议 websocket 历史管理 history 跨窗口通信 PostMessage Form Data 对象</p><ol><li><code>&lt;header&gt;</code>：定义文档或节的页眉，通常包含网站标题、Logo、导航等信息。</li><li><code>&lt;nav&gt;</code>：定义导航链接的容器，通常用于包含页面的主要导航菜单。</li><li><code>&lt;section&gt;</code>：定义文档中的一个节，通常包含相关内容的分组，比如文章的章节、页面的不同部分等。</li><li><code>&lt;article&gt;</code>：定义独立、完整的内容块，比如一篇博客文章、一则新闻报道等。</li><li><code>&lt;aside&gt;</code>：定义页面的侧边栏内容，通常包含与主要内容相关但可以独立存在的辅助信息。</li></ol><p>HTML5 的几个新特性包括：</p><ol><li>语义化标签：HTML5 引入了一些新的语义化标签，如 <code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;section&gt;</code> 和 <code>&lt;article&gt;</code> 等，使开发者能够更清晰地描述网页的结构和内容，有利于搜索引擎的理解和网页的可访问性。</li><li>表单增强：HTML5 提供了一系列的新表单元素和属性，如 <code>&lt;input type=&quot;email&quot;&gt;</code>、<code>&lt;input type=&quot;date&quot;&gt;</code> 和 <code>placeholder</code> 属性等，简化了表单的编写和验证过程，并提供了更好的用户体验。</li><li>多媒体支持：HTML5 增加了对多媒体元素的原生支持，如 <code>&lt;video&gt;</code> 和 <code>&lt;audio&gt;</code> 标签，可以直接在网页中播放视频和音频内容，无需借助插件。</li><li>Canvas 绘图：HTML5 的 <code>&lt;canvas&gt;</code> 元素提供了一个绘制图形的容器，并通过 JavaScript API 提供了强大的绘图功能，使开发者能够在网页上创建复杂的图形、动画和游戏等交互效果。</li><li>本地存储：HTML5 引入了一些用于客户端存储数据的新机制，如 Web Storage（localStorage 和 sessionStorage）和 IndexedDB，使得网页可以在本地存储数据，在离线状态下继续访问。</li></ol><h2 id="增强表单" tabindex="-1">增强表单 <a class="header-anchor" href="#增强表单" aria-label="Permalink to &quot;增强表单&quot;">​</a></h2><p>HTML5引入了一些新的输入类型属性，可以帮助开发人员<strong>更轻松地验证和获取不同类型的用户输入</strong>。以下是HTML5中的一些新的输入类型属性：</p><ol><li><code>email</code>：用于验证电子邮件地址的格式。它会强制要求输入框中的值符合标准的电子邮件格式（例如：name@example.com）。</li><li><code>url</code>：用于验证URL的格式。它会强制要求输入框中的值符合URL的格式，包括协议头和域名等部分。</li><li><code>tel</code>：用于接受电话号码的输入。它可以支持各种电话号码格式，并且在移动设备上可以自动调用电话功能。</li><li><code>number</code>：用于接受数值的输入。它会验证输入框中的值是否为数值，可以使用最小值、最大值和步长等属性进行限制。</li><li><code>date</code>：用于接受日期的输入。它会提供一个日期选择器，以便用户可以选择日期。</li><li><code>time</code>：用于接受时间的输入。它会提供一个时间选择器，以便用户可以选择时间。</li><li><code>color</code>：用于接受颜色的输入。它会提供一个颜色选择器，以便用户可以选择颜色。</li></ol>`,54),s=[c];function i(d,n,p,r,g,m){return l(),o("div",null,s)}const D=e(a,[["render",i]]);export{u as __pageData,D as default};
